@router.post("/forgot-password-mobile-code", status_code=status.HTTP_200_OK,  summary="Demander réinitialisation (envoi CODE pour MOBILE)") 
def forgot_password_mobile_code(reset_request: ForgotPasswordRequest,  background_tasks: BackgroundTasks): 
try: 
user_res = supabase.table("utilisateurs").select("id, email").eq("email",  reset_request.email).single().execute() 
if not user_res.data: 
print(f"DEBUG: Tentative de réinitialisation (code) pour {reset_request.email} (utilisateur  non trouvé).") 
# Pour des raisons de sécurité, ne pas indiquer si l'email existe ou non return {"message": "Si un compte avec cet email existe, un code de vérification a été  envoyé."} 
# Générer un code OTP numérique (par exemple, 8 chiffres) 
verification_code = ''.join(secrets.choice('0123456789') for _ in range(8)) print(f"DEBUG: Code de vérification généré pour {reset_request.email}:  {verification_code}") 
# Hacher le code avant de le stocker pour la sécurité 
code_hash = hashlib.sha256(verification_code.encode('utf-8')).hexdigest() expires_at = datetime.now(timezone.utc) + timedelta(minutes=15) # Le code expire  après 15 minutes 
supabase.table("utilisateurs").update({ 
"reset_token": code_hash, # On utilise la même colonne reset_token pour stocker le hash  du code 
"reset_token_expires": expires_at.isoformat() 
}).eq("email", reset_request.email).execute() 
background_tasks.add_task( 
send_password_reset_code_email, # <-- Utilise la nouvelle fonction d'envoi de CODE user_email=reset_request.email, 
verification_code=verification_code 
) 
return {"message": "Si un compte avec cet email existe, un code de vérification a été  envoyé."} 
except Exception as e: 
print(f"Forgot password error (code generation): {e}") 
raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,  detail="Une erreur interne est survenue. Veuillez réessayer plus tard.") 


@router.post("/reset-password-with-code",  
status_code=status.HTTP_200_OK,  
summary="Réinitialiser le mot de passe avec le code mobile")
def reset_password_with_code(request: ResetPasswordCodeRequest): """ 
Vérifie le code reçu par email et réinitialise le mot de passe de l'utilisateur. """ 
try: 
# 1. Hacher le code reçu pour le comparer à celui dans la BDD 
code_hash = hashlib.sha256(request.code.encode('utf-8')).hexdigest() 
# 2. Vérifier que l'email et le code haché correspondent ET que le jeton n'est pas expiré now_utc = datetime.now(timezone.utc) 
user_res = supabase.table("utilisateurs").select("*") \ 
.eq("email", request.email) \ 
.eq("reset_token", code_hash) \ 
.gt("reset_token_expires", now_utc.isoformat()) \ 
.single().execute() 
if not user_res.data: 
raise HTTPException( 
status_code=status.HTTP_400_BAD_REQUEST, 
detail="Le code de vérification est invalide ou a expiré." 
) 
user = user_res.data 
# 3. Hacher le nouveau mot de passe 
new_password_hash = hash_password(request.new_password) 
# 4. Mettre à jour le mot de passe et effacer les jetons de réinitialisation supabase.table("utilisateurs").update({ 
"mot_de_passe_hash": new_password_hash, 
"reset_token": None, 
"reset_token_expires": None 
}).eq("id", user['id']).execute() 
return {"message": "Votre mot de passe a été réinitialisé avec succès."} 
except HTTPException as http_exc: 
raise http_exc 
except Exception as e: 
print(f"Erreur de réinitialisation du mot de passe avec code : {e}") raise HTTPException( 
status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, 
detail="Une erreur interne est survenue lors de la réinitialisation." ) 
et email,sender,py : 
def send_password_reset_code_email(user_email: str, verification_code: str): """Envoie l'email contenant le code de vérification pour la réinitialisation mobile.""" subject = "[GIF Mada] Votre code de réinitialisation de mot de passe" body = ( 
f"Bonjour,\n\n"
f"Vous avez demandé une réinitialisation de votre mot de passe pour l'application mobile  GIF Mada.\n\n" 
f"Votre code de vérification est : {verification_code}\n\n" 
f"Ce code expirera dans 15 minutes.\n\n" 
f"Veuillez entrer ce code dans l'application mobile pour définir un nouveau mot de passe.\ n\n" 
f"Si vous n'êtes pas à l'origine de cette demande, vous pouvez ignorer cet email.\n\n" f"L'équipe GIF Mada." 
) 
send_email(user_email, subject, body)
